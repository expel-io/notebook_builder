# The notebook name is both the file name and the unique identifier for the hunt
notebook_name: anom_proc_rel
# The full name is used to reference the specific hunting technique
technique_name: Anomalous Process Relationships

# These are the fields that will need to be in every hunt to avoid key errors
column_list: ['record_id', 'timestamp', 'host', 'sensor_id', 'user', 'event_id', 'process_name', 'process_args', 'parent_name']

# What is this hunt technique, what is it looking for? Reference the Threat Hunting Library.
hunt_description: |
  ## Hunt Description
  There are pairings of processes that might be indicative of exploit execution, payload execution, or other malicious activity. For instance, a web server hosting a web shell, which is a web page that serves as a backdoor, may make the web server process spawn a command line process when executing threat actor commands. The goal of this technique is to identify these types of process relationships for further review.

# This is the technical description of the hunt and what type of data is involved. Reference the Threat Hunting Library.
technique_details: |
  ### Technique Details
  **We specifically we are looking for:**
  * Malicious java
      - Parent process is java.exe
      - Parent process is javaw.exe
  * Exploit detection - MS Office products executing embedded macro, pdf, etc
      - Parent process is winword.exe (MS Office)
      - Parent process is excel.exe (MS Office)
      - Parent process is powerpnt.exe  (MS Office)
  * Web shell usage - Parent process being web server software spawning things like cmd or other processes. Main ones covered below.
      - Parent process is w3wp.exe (IIS)
      - Parent process is httpd.exe (Apache)
      - Parent process is nginx.exe (nginx)
      - Parent process is tomcat.exe (tomcat)
  * Executing commands through sql injection (ex: xp_cmdshell)
      - Parent process is sqlservr.exe (MS SQL)
      - Parent process is mysqld.exe (MySQL)
      - Parent process is postgres.exe (PostgreSQL)
      - Parent process if mongod.exe (MongoDB)
  * Exploit detection - MS Office products executing embedded macro, pdf, etc
      - Parent process is acrobat.exe or acrord32.exe (Adobe Acrobat)

# How should an analyst review the data? What should the analyst be looking out for in general, ie Observables.
# If we were to identify an incident, what would be some commone containment or remediation actions?
triage_tips: |
  ## General Triage Notes
  **Observables:**
   - Did the child process spawn additional processes?
   - If the process that was spawned is an unknown process, is it malware?
   - If the parent process was a web server process, try to determine if it is related to a web shell. If we suspect it is, we may want to obtain web logs for the time period to see if we can link the spawning of the process to a web request.

  **Common remediation actions for this technique would include:**
   - If the true positive activity was related to a malicious document, remove the malicious document and remove malware deployed by the document.
   - If the true positive is related to a web shell on a web server, remove the web shell.
   - If the true positive is related to database software, advise the customer to obtain a pentest to identify the SQL injection vulnerability.

downselects:
- title: Malicious Java Review
  desc: |
    Java exploitations range from client side browser code execution for spyware to cross-platform remote access (JRAT).

    **Filters Applied:**
    - Parent process is java.exe
    - Parent process is javaw.exe
  obsv:
    - Look for Java as the parent of any unknown or unfamiliar processes.
    - Look for Java as parent of a shell, specifically if the shell is executing commands indicative of reconnaissance.
  ref:
    - https://attack.mitre.org/software/S0283/
    - https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07195002/KL_AdwindPublicReport_2016.pdf
  func: d.java_exploit(['record_id', 'timestamp', 'host', 'sensor_id', 'user', 'event_id', 'process_name', 'process_args', 'parent_name'])
- title: Exploit detection - MS Office products executing embedded macro, pdf, etc
  desc: |
    Common office and productivity applications such as Microsoft Office are also targeted through Spearphishing Attachment, Spearphishing Link, and Spearphishing via Service. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.
    There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.

    **Filters Applied:**
    - Parent process is winword.exe (MS Office)
    - Parent process is excel.exe (MS Office)
    - Parent process is powerpnt.exe  (MS Office)
  obsv:
    - Watch for office products executing unknown binaries or suspicious processes.
  ref:
    - https://attack.mitre.org/techniques/T1193/
  func: d.office_exploit(['record_id', 'timestamp', 'host', 'sensor_id', 'user', 'event_id', 'process_name', 'process_args', 'parent_name'])
- title: Exploit detection - Adobe execution
  desc: |
    This attack technique is the same as the Office products above, but specific to Adobe as parent process.

    **Filters Applied:**
    - Parent process is acrobat.exe or acrord32.exe (Adobe Acrobat)
  obsv:
    - Watch for Adobe spawning scripting interpreters, browsers and/or other suspicious processes.
  ref:
    - https://attack.mitre.org/techniques/T1193/
  func: d.adobe_exploit(['record_id', 'timestamp', 'host', 'sensor_id', 'user', 'event_id', 'process_name', 'process_args', 'parent_name'])
- title: Web shell usage
  desc: |
    Review process args for the presence of sub-process execution especially if the sub-process is a command shell or scripting interpreter.

    **Filters Applied:**
    - Parent process is w3wp.exe (IIS)
    - Parent process is httpd.exe (Apache)
    - Parent process is nginx.exe (nginx)
    - Parent process is tomcat.exe (tomcat)
  obsv:
    - Watch for suspicious processes spawning from web applications, particularly scripting interpreters.
  ref:
    - https://attack.mitre.org/techniques/T1100/
  func: d.web_shell_exploit(['record_id', 'timestamp', 'host', 'sensor_id', 'user', 'event_id', 'process_name', 'process_args', 'parent_name'])
- title: Frequency Counts
  desc: Displays count of occurance patterns.
  obsv:
    - Do we see a high number of events on one particular host or events generated by one particular user?
    - What kinds of events are being generated by the high frequency host or user?
  ref:
  func: d.general_frequency_trend(['host', 'sensor_id', 'user', 'parent_name', 'process_name'], 'timestamp')
